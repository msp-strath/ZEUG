syntax term Q, R, S, T, q, r, s, t  -:
  [e]
  (x : S) -> T 
  (x : S) * T 
  S = T
  a {Q} b
  \ x -> t
  s , t

syntax elimination E, F, e, f  -:
  x
  f s
  E p
  f fst
  f snd
  s:S

syntax point p  -:
  i
  0
  1
  i[p0-p1]

syntax end a, b  -:
  @
  t

judgment TYPE T
judgment E TYPE
judgment T :> t
judgment e <: S
judgment T END a
judgment POINT p
judgment S <= T
judgment S == T
judgment T :> s == t
judgment e == f <: S
judgment T :> t REFINES a

T :> [e]  -:
  e <: S
  S <= T

s:S <: S  -:
  TYPE S
  S :> s

x <: S  -:
  x : S in context

TYPE (x : S) -> T  -:
  TYPE S
  x : S |- TYPE T

(x : S) -> T :> \ x -> t  -:
  x : S |- T :> t

f s <: T[s:S/x]  -:
  f <: (x : S) -> T
  S :> s

TYPE (x : S) * T  -:
  TYPE S
  x : S |- TYPE T

(x : S) * T :> s , t  -:
  S :> s
  T[s:S/x] :> t

e fst <: S  -:
  e <: (x : S) * T

e snd <: T[e fst:S/x]  -:
  e <: (x : S) * T

TYPE S = T  -:
  TYPE S
  TYPE T

R = T :> \ i -> S  -:
  i |- TYPE T
  S[0/i] == R
  S[1/i] == T

TYPE [E]  -:
  E TYPE

E p TYPE  -:
  E <: S = T
  POINT p

S =@ <= @=@  -:
@= T <= @=@  -:
S = T <= S =@  -:
S = T <= @= T  -:

POINT 0 -:
POINT 1 -:
POINT i -:
  i in context

TYPE a {Q} b  -:
  [Q 0] END a
  [Q 1] END b

T END @  -:
T END t  -:
  T :> t

a {Q} b :> \ i -> t  -:
  i |- [Q i] :> t
  [Q 0] :>  t[0/i] REFINES a 
  [Q 1] :>  t[1/i] REFINES b

T :> t REFINES @  -:

T :> t REFINES s  -:
  T :> s == t
  
q p <: Q p  -:
  q <: a {Q} b
  POINT p

defining p[p0-p1]  -:
  0[p0-p1] = p0
  1[p0-p1] = p1
  i[p0-p1] = i[p0-p1]
  i[p0'-p1'][p0-p1] = i[p0'[p0-p1]-p1'[p0-p1]]
  i[p-p] = p
  i[0-1] = i

Q . Q' <: R = T  -:
  Q <: R = S
  Q' <: S' = T
  S == S'

q . q' <: a {Q . Q'} d  -:
  q <: a {Q} b
  q' <: c {Q'} d
  [Q 1] == [Q' 0]
  [Q 1] :> [q 1] == [q 0]


s -@ Q <: s {Q}@  -:
  Q <: S = T
  S :> s

Q @- t <: @{Q} t  -:
  Q <: S = T
  T :> t

defining ~Q  -:
  ~Q = \ i -> Q i[1-0]

defining Q @- t  -:
  Q @- t = ~(t -@ ~Q)

defining t-@ Q  -:
  f -@ (\ i -> (x : S(i)) -> T(i,x)) =
    \ i -> \ x ->
      let eS = (\ j -> S(j[0-i])) @- x
          eT = f (eS 0) -@ (\ j -> T(j[0-i],eS j))
      in  eT 1
  e -@ (\ i -> (x : S(i)) * T(i,x)) =
    \ i ->
      let eS = e fst -@ (\ j -> S(j[0-i]))
          eT = e snd -@ (\ j -> T(j[0-i],eS j))
      in  eS 1 , eT 1
  e -@ (Q . Q') = let e' = e -@ Q in e' . (e' 1 -@ Q')
  E -@ (\ i -> A(i) = B(i)) =
    \ i -> (\ j -> A(j[i-0])) . E . (\ j -> B(j[0-i]))
