{ set_id (X : ['El ['Set ['zero]]]) = X : ['El ['Set ['zero]]] }
{ poly_id (X : ['El ['Set ['zero]])(x : ['El X]) = x : X }
{ Nat
  { Ty = ['Pi ['Set] \ X . ['Pi ['Pi X \ x . X] \ f . ['Pi X \ x . X]]] : ['Type] }
  { zero = \ f . \ x . x : ['El Ty] }
  { suc  = \ n . \ f . \ x . f (n f x) : ['El ['Pi Ty \ x . Ty]] } }
{ two = Nat.suc (Nat.suc Nat.zero) : ['El Nat.Ty] }
{ List
  (X : ['Type])
  { Ty = ? : ['Type] }
  { nil   = ? : ['El Ty] }
  { cons  = ? : ['El ['Pi X \ x . ['Pi Ty \ xs . Ty]]] } }
{ nums = List.cons Nat.Ty two
         (List.cons Nat.Ty Nat.zero (List.nil Nat.Ty))
       : ['El (List.Ty Nat.Ty)] }
{ twos = [ two | two ] : ['El ['Sg Nat.Ty \ x . Nat.Ty ]] }
{ fst = twos 'Fst : ['El Nat.Ty] }
{ snd = twos 'Snd : ['El Nat.Ty] }
