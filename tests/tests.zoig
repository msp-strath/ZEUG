{ set_id (X : 'Set) = X : 'Set }
{ poly_id (X : 'Set)(x : X) = x : X }
{ Nat
  { Type = ['Pi 'Set \ X . ['Pi ['Pi X \ x . X] \ f . ['Pi X \ x . X]]] : 'Set }
  { zero = \ f . \ x . x : Type }
  { suc  = \ n . \ f . \ x . f (n f x) : ['Pi Type \ x . Type] } }
{ two = Nat.suc (Nat.suc Nat.zero) : Nat.Type }
{ List
  (X : 'Set)
  { Type = ? : 'Set }
  { nil   = ? : Type }
  { cons  = ? : ['Pi X \ x . ['Pi Type \ xs . Type]] } }
{ nums = List.cons Nat.Type two
         (List.cons Nat.Type Nat.zero (List.nil Nat.Type))
       : List.Type Nat.Type }
{ twos = [ two | two ] : ['Sg Nat.Type \ x . Nat.Type ] }
{ fst = twos 'Fst : Nat.Type }
{ snd = twos 'Snd : Nat.Type }
